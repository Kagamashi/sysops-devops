// package main

import (
    "context"
    "fmt"
    "go.opentelemetry.io/otel"
    "go.opentelemetry.io/otel/trace"
    "go.opentelemetry.io/otel/exporters/stdout/stdouttrace"
    "go.opentelemetry.io/otel/sdk/trace"

    "go.opentelemetry.io/otel/metric"
    "go.opentelemetry.io/otel/exporters/stdout/stdoutmetric"
    "go.opentelemetry.io/otel/sdk/metric"
)

/*
OpenTelemetry (OTel) is an observability framework for collecting metrics, logs and traces.

It integrates well with Prometheus, Grafana, Jaeger, Loki.

Metrics     Track performance (request latency, error rate)
Tracing     See how requests flow across microservices
Logs        Store structured event data
*/

// Tracing
func otel_traces() {
    // Create a console-based exporter
    exporter, _ := stdouttrace.New(stdouttrace.WithPrettyPrint())

    // Create a new tracer provider
    provider := trace.NewTracerProvider(trace.WithBatcher(exporter))
    otel.SetTracerProvider(provider)

    tracer := otel.Tracer("my-app")

    ctx, span := tracer.Start(context.Background(), "main-operation")
    defer span.End()

    fmt.Println("Executing main logic...")

    _, childSpan := tracer.Start(ctx, "sub-task")
    defer childSpan.End()

    fmt.Println("Done!")
}

// Metrics
func otel_metrics() {
    // Create a metrics exporter
    exporter, _ := stdoutmetric.New()
    provider := metric.NewMeterProvider(metric.WithReader(exporter))
    otel.SetMeterProvider(provider)

    meter := otel.Meter("my-service")
    requestCounter, _ := meter.Int64Counter("http_requests_total")

    ctx := context.Background()
    requestCounter.Add(ctx, 1)

    fmt.Println("Recorded 1 request metric")
}
