// package main
import (
	"testing"

	// go get github.com/stretchr/testify
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/mock"
)

/*
stretchr/testify is a widely used library that provides:
	- assertions (assert, require)
	- mocking (mock)
	- suite-based testing

*/

func Add(a, b int) int {
	return a + b
}

// assert package provides better error messages compared to manually writing if conditions
func TestAdd(t *testing.T) {
	result := Add(2, 3)
	assert.Equal(t, 5, result, "Addition should return the correct sum")
	assert.NotEqual(t, 10, result, "Sum should not be 10")
}


// require stops execution immediately if the check fails
func TestDivision(t *testing.T) {
	result := divide(10, 2)
	require.NotZero(t, result, "Result should not be zero")
	require.Equal(t, 5, result, "10 divided by 2 should be 5")
}


// mocks help simulate external dependencies like databases, APIs, services
// define an interface for dependency
type UserService interface {
	GetUser(id int) string
}

// Create a mock struct that implements UserService
type MockUserService struct {
	mock.Mock
}

// Mock the GetUser method
func (m *MockUserService) GetUser(id int) string {
	args := m.Called(id)
	return args.String(0)
}

// Function that depends on UserService
func GetUserName(service UserService, id int) string {
	return service.GetUser(id)
}

func TestGetUserName(t *testing.T) {
	mockService := new(MockUserService)

	// Define expected behavior
	mockService.On("GetUser", 1).Return("John Doe")

	// Call the function with the mock service
	name := GetUserName(mockService, 1)

	// Validate the result
	assert.Equal(t, "John Doe", name)

	// Ensure the mock was called correctly
	mockService.AssertCalled(t, "GetUser", 1)
}