# ConfigMap
# Used to store non-sensitive configuration data in key-value pairs. 

apiVersion: v1 
kind: ConfigMap
metadata:
  name: my-config
  labels:          # Optional labels for organizing resources
    app: my-app
data:              # Data block contains key-value pairs of non-sensitive data
  configKey1: configValue1  # A simple key-value pair
  configKey2: |
    This is a multi-line value
    that can be stored in the ConfigMap.
  database_url: "jdbc:mysql://localhost:3306/mydb"
  log_level: "INFO"

---
# You can also load data from files (from the command line):
# kubectl create configmap my-config --from-file=config.properties
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-config-from-file
data:
  config.properties: |
    property1=value1
    property2=value2
  app-config.json: |
    {
      "log_level": "DEBUG",
      "port": 8080
    }

---
# ConfigMap with Binary Data
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-binary-config
binaryData:
  binaryKey1: VGhpcyBpcyBhIGJpbmFyeSB2YWx1ZQ==  # Base64-encoded binary data

--- 

# MOUNTING
# ConfigMap as Environment Variable
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
    - name: my-container
      image: nginx
      env:
        - name: CONFIG_KEY1
          valueFrom:
            configMapKeyRef:
              name: my-config  # Name of the ConfigMap
              key: configKey1  # Specific key from the ConfigMap to reference
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: my-config
              key: log_level

---
# ConfigMap as Volumes
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
    - name: my-container
      image: nginx
      volumeMounts:
        - name: config-volume
          mountPath: /etc/config  # Mount path inside the container
          readOnly: true
  volumes:
    - name: config-volume
      configMap:
        name: my-config  # Name of the ConfigMap

---
# ConfigMap for CLI Arguments
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
    - name: my-container
      image: nginx
      command: ["sh", "-c", "echo $(CONFIG_KEY1)"]
      env:
        - name: CONFIG_KEY1
          valueFrom:
            configMapKeyRef:
              name: my-config
              key: configKey1
