# This setup securely mounts TLS certificates from Azure Key Vault into Kubernetes and configures Istio Gateway to use those certificates for TLS termination

# 1. Secret Mounter Deployment mounts secrets from Azure Key Vault using CSI Secret Store driver
# 2. SecretProviderClass defines how secrets are fetched from KeyVault
# 3. Istio Gateway uses the TLS certificates for handling HTTPS traffic for server1.example.com and server2.example.com

---
# Secret Mounter
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secret-mounter
  namespace: istio-system
spec:
  template:
    spec:
      containers:
      - name: pause
        volumeMounts:
        - name: server1
          mountPath: /mnt/certificates/server1 # where tls cert will be mounted
          readOnly: true
        - name: server2
          mountPath: /mnt/certificates/server2
          readOnly: true
      volumes:
      - name: server1
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "server1" # must match SecretProviderClass name
      - name: server2
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "server2"
---
# SPC for server1
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: server1   # must match volumeAttributes.secretProviderClass in the Deployment
  namespace: istio-system
spec:
  provider: azure
  secretObjects:
  - secretName: server1   # name of Kubernetes Secret that will store TLS certs
    type: kubernetes.io/tls # required for Istio to use it for TLS termination
    data:
    - objectName: my-secret # must match the name of the secret in Key Vault
      key: tls.key
    - objectName: my-secret
      key: tls.crt
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "false"
    keyvaultName: '>>KEY-VAULT-NAME<<'
    tenantID: '>>TENANT-ID<<'
    clientID: '>>CLIENT-ID-MSI<<'
    objects: |
      array:
        - |
          objectName: my-secret
          objectType: secret
---
# SPC for server2
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: server2
  namespace: istio-system
spec:
  provider: azure
  secretObjects:
  - secretName: server2
    type: kubernetes.io/tls
    data:
    - objectName: my-secret
      key: tls.key
    - objectName: my-secret
      key: tls.crt
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "false"
    keyvaultName: '>>KEY-VAULT-NAME<<'
    tenantID: '>>TENANT-ID<<'
    clientID: '>>CLIENT-ID-MSI<<'
    objects: |
      array:
        - |
          objectName: my-secret
          objectType: secret
---
# Gateway with certs
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: my-gateway
  namespace: istio-system # must match namespace of Istio IngressGateway
spec:
  selector:
    istio: ingressgateway # must match labels of Istio IngressGateway
  servers:
  - name: server1
    hosts:
    - "server1.example.com" # must match domain for which TLS cert is issued
    port:
      number: 443
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: server1  # must match the Kubernetes Secret name created in SecretProviderClass
  - name: server2
    hosts:
    - "server2.example.com"
    port:
      number: 443
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: server2
